// Generated by ReScript, PLEASE EDIT WITH CARE

import * as App from "firebase/app";
import * as Firestore from "firebase/firestore";

let firebaseConfig_apiKey = process.env.APIKEY;

let firebaseConfig_projectId = process.env.PROJECTID;

let firebaseConfig_appId = process.env.APPID;

let firebaseConfig = {
  apiKey: firebaseConfig_apiKey,
  authDomain: "",
  projectId: firebaseConfig_projectId,
  storageBucket: "rescript-sample.appspot.com",
  messagingSenderId: "",
  appId: firebaseConfig_appId
};

let app = App.initializeApp(firebaseConfig);

let store = Firestore.getFirestore(app);

let todoCollectionName = "todos";

let todoCollection = Firestore.collection(store, todoCollectionName);

Firestore.addDoc(todoCollection, {
  description: "Initial todo",
  completed: false
}).then(ref => {
  console.log("Created " + ref.id + " at " + ref.path);
});

let allTodosQuery = Firestore.query(todoCollection);

Firestore.getDocs(allTodosQuery).then(querySnapshot => {
  console.log("Found " + querySnapshot.size.toString() + " todos");
  querySnapshot.docs.forEach(queryDocumentSnapshot => {
    let todo = queryDocumentSnapshot.data();
    console.log(queryDocumentSnapshot.id, todo);
  });
});

let specificTodoRef = Firestore.doc(store, todoCollectionName, "todo-" + crypto.randomUUID());

Firestore.setDoc(specificTodoRef, {
  description: "specific todo",
  completed: false
}).then(() => {
  console.log("Created specific todo " + specificTodoRef.id);
  return Firestore.updateDoc(specificTodoRef, "completed", true);
}).then(() => {
  console.log("Completed " + specificTodoRef.id);
});

Firestore.getDocs(Firestore.query(todoCollection, Firestore.limit(1))).then(querySnapshot => {
  let qds = querySnapshot.docs[0];
  if (qds !== undefined) {
    return Firestore.deleteDoc(qds.ref);
  } else {
    return Promise.resolve();
  }
}).then(() => {
  console.log("Removed a todo");
});

export {
  firebaseConfig,
  app,
  store,
  todoCollectionName,
  todoCollection,
  allTodosQuery,
  specificTodoRef,
}
/* firebaseConfig Not a pure module */
